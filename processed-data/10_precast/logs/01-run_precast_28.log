**** Job starts ****
Thu Apr 18 08:08:45 AM EDT 2024
**** JHPCE info ****
User: pravicha
Job id: 4622059
Job name: 01-run_precast_default
Node name: compute-090
Task id: 28
Loading LIBD SLURM module for r_nac/1.0
here() starts at /dcs04/lieber/marmaypag/spatialNac_LIBD4125/spatial_NAc
Loading required package: parallel
Loading required package: gtools
PRECAST :  An efficient data integration method is provided for multiple spatial transcriptomics data with non-cluster-relevant effects such as the complex batch effects. It unifies spatial factor analysis simultaneously with spatial clustering and embedding alignment, requiring only partially shared cell/domain clusters across datasets. More details can be referred to Wei Liu, et al. (2023) <doi:10.1038/s41467-023-35947-w>.   Check out our Package website (https://feiyoung.github.io/PRECAST/index.html) for a more complete description of the methods and analyses
Loading required package: DelayedArray
Loading required package: stats4
Loading required package: Matrix
Loading required package: BiocGenerics

Attaching package: ‘BiocGenerics’

The following objects are masked from ‘package:stats’:

    IQR, mad, sd, var, xtabs

The following objects are masked from ‘package:base’:

    anyDuplicated, aperm, append, as.data.frame, basename, cbind,
    colnames, dirname, do.call, duplicated, eval, evalq, Filter, Find,
    get, grep, grepl, intersect, is.unsorted, lapply, Map, mapply,
    match, mget, order, paste, pmax, pmax.int, pmin, pmin.int,
    Position, rank, rbind, Reduce, rownames, sapply, setdiff, sort,
    table, tapply, union, unique, unsplit, which.max, which.min

Loading required package: MatrixGenerics
Loading required package: matrixStats

Attaching package: ‘MatrixGenerics’

The following objects are masked from ‘package:matrixStats’:

    colAlls, colAnyNAs, colAnys, colAvgsPerRowSet, colCollapse,
    colCounts, colCummaxs, colCummins, colCumprods, colCumsums,
    colDiffs, colIQRDiffs, colIQRs, colLogSumExps, colMadDiffs,
    colMads, colMaxs, colMeans2, colMedians, colMins, colOrderStats,
    colProds, colQuantiles, colRanges, colRanks, colSdDiffs, colSds,
    colSums2, colTabulates, colVarDiffs, colVars, colWeightedMads,
    colWeightedMeans, colWeightedMedians, colWeightedSds,
    colWeightedVars, rowAlls, rowAnyNAs, rowAnys, rowAvgsPerColSet,
    rowCollapse, rowCounts, rowCummaxs, rowCummins, rowCumprods,
    rowCumsums, rowDiffs, rowIQRDiffs, rowIQRs, rowLogSumExps,
    rowMadDiffs, rowMads, rowMaxs, rowMeans2, rowMedians, rowMins,
    rowOrderStats, rowProds, rowQuantiles, rowRanges, rowRanks,
    rowSdDiffs, rowSds, rowSums2, rowTabulates, rowVarDiffs, rowVars,
    rowWeightedMads, rowWeightedMeans, rowWeightedMedians,
    rowWeightedSds, rowWeightedVars

Loading required package: S4Vectors

Attaching package: ‘S4Vectors’

The following objects are masked from ‘package:Matrix’:

    expand, unname

The following object is masked from ‘package:utils’:

    findMatches

The following objects are masked from ‘package:base’:

    expand.grid, I, unname

Loading required package: IRanges
Loading required package: S4Arrays
Loading required package: abind

Attaching package: ‘S4Arrays’

The following object is masked from ‘package:abind’:

    abind

The following object is masked from ‘package:base’:

    rowsum

Loading required package: SparseArray

Attaching package: ‘DelayedArray’

The following objects are masked from ‘package:base’:

    apply, scale, sweep

Loading required package: rhdf5

Attaching package: ‘HDF5Array’

The following object is masked from ‘package:rhdf5’:

    h5ls

Loading required package: SeuratObject
Loading required package: sp

Attaching package: ‘sp’

The following object is masked from ‘package:IRanges’:

    %over%


Attaching package: ‘SeuratObject’

The following object is masked from ‘package:IRanges’:

    intersect

The following object is masked from ‘package:S4Vectors’:

    intersect

The following object is masked from ‘package:BiocGenerics’:

    intersect

The following object is masked from ‘package:base’:

    intersect


Attaching package: ‘dplyr’

The following objects are masked from ‘package:IRanges’:

    collapse, desc, intersect, setdiff, slice, union

The following objects are masked from ‘package:S4Vectors’:

    first, intersect, rename, setdiff, setequal, union

The following object is masked from ‘package:matrixStats’:

    count

The following objects are masked from ‘package:BiocGenerics’:

    combine, intersect, setdiff, union

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     1.0.2     ✔ tidyr     1.3.0
✔ readr     2.1.4     
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ lubridate::%within%() masks IRanges::%within%()
✖ dplyr::collapse()     masks IRanges::collapse()
✖ dplyr::combine()      masks BiocGenerics::combine()
✖ dplyr::count()        masks matrixStats::count()
✖ dplyr::desc()         masks IRanges::desc()
✖ tidyr::expand()       masks S4Vectors::expand(), Matrix::expand()
✖ dplyr::filter()       masks stats::filter()
✖ dplyr::first()        masks S4Vectors::first()
✖ dplyr::lag()          masks stats::lag()
✖ tidyr::pack()         masks Matrix::pack()
✖ ggplot2::Position()   masks BiocGenerics::Position(), base::Position()
✖ purrr::reduce()       masks IRanges::reduce()
✖ dplyr::rename()       masks S4Vectors::rename()
✖ lubridate::second()   masks S4Vectors::second()
✖ lubridate::second<-() masks S4Vectors::second<-()
✖ purrr::simplify()     masks DelayedArray::simplify()
✖ dplyr::slice()        masks IRanges::slice()
✖ lubridate::stamp()    masks cowplot::stamp()
✖ tidyr::unpack()       masks Matrix::unpack()
ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors
Loading required package: SingleCellExperiment
Loading required package: SummarizedExperiment
Loading required package: GenomicRanges
Loading required package: GenomeInfoDb
Loading required package: Biobase
Welcome to Bioconductor

    Vignettes contain introductory material; view with
    'browseVignettes()'. To cite Bioconductor, see
    'citation("Biobase")', and for packages 'citation("pkgname")'.


Attaching package: ‘Biobase’

The following object is masked from ‘package:SparseArray’:

    rowMedians

The following object is masked from ‘package:MatrixGenerics’:

    rowMedians

The following objects are masked from ‘package:matrixStats’:

    anyMissing, rowMedians


Attaching package: ‘SummarizedExperiment’

The following object is masked from ‘package:Seurat’:

    Assays

The following object is masked from ‘package:SeuratObject’:

    Assays


Attaching package: ‘ggpubr’

The following object is masked from ‘package:cowplot’:

    get_legend

Loading required package: scuttle
[1] "Output saved at:"
[1] "/dcs04/lieber/marmaypag/spatialNac_LIBD4125/spatial_NAc/processed-data/10_precast/nnSVG_precast"
[1] "Spatially variable genes obtained from:"
[1] "/dcs04/lieber/marmaypag/spatialNac_LIBD4125/spatial_NAc/processed-data/05_harmony_BayesSpace/07-run_nnSVG/nnSVG_precast_out/summary_across_samples.csv"
[1] "Plots saved at:"
[1] "/dcs04/lieber/marmaypag/spatialNac_LIBD4125/spatial_NAc/plots/10_precast/nnSVG_precast/cluster_k_28"
Br2720 
22368 19666 
Br2743 
22368 17571 
Br3942 
22368 18085 
Br6423 
22368 14792 
Br6432 
22368 19211 
Br6471 
22368 18995 
Br6522 
22368 19136 
Br8325 
22368 22221 
Br8492 
22368 16876 
Br8667 
22368 8799 
Filter spots and features from Raw count data...
 
 
2024-04-18 08:20:36.761753 : ***** Filtering step for raw count data finished!, 0.619 mins elapsed.
Select the variable genes for each data batch...
CreatePRECASTObject: remove genes:SLC47A2  IGKC  C11orf88  TTR  CFAP73  SPAG6  CAPSL  MYLK3  CCDC114  FAM92B  IGFBP7-AS1  PCDH11Y  SOX2-OT  NKX6-2  HLA-B  HLA-DPA1  HLA-DRA  HLA-DPB1  XIST  HLA-DRB1  HLA-A  HLA-E  HLA-C  OIP5-AS1  with low count reads in seuList.
2024-04-18 08:20:36.87392 : ***** Gene selection finished!, 0.001 mins elapsed.
Filter spots and features from SVGs(HVGs) count data...
Normalizing layer: counts
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Normalizing layer: counts
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Normalizing layer: counts
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Normalizing layer: counts
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Normalizing layer: counts
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Normalizing layer: counts
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Normalizing layer: counts
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Normalizing layer: counts
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Normalizing layer: counts
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Normalizing layer: counts
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
2024-04-18 08:21:29.210927 : ***** Filtering step for count data with variable genes finished!, 0.672 mins elapsed.
Neighbors were identified for 19663 out of 19665 spots.
Neighbors were identified for 17567 out of 17571 spots.
Neighbors were identified for 18007 out of 18008 spots.
Neighbors were identified for 14790 out of 14791 spots.
Neighbors were identified for 19198 out of 19199 spots.
Neighbors were identified for 18995 out of 18995 spots.
Neighbors were identified for 19114 out of 19116 spots.
Neighbors were identified for 22220 out of 22221 spots.
Neighbors were identified for 16873 out of 16876 spots.
Neighbors were identified for 8784 out of 8787 spots.
-----Intergrative data info.: 10 samples, 1976 genes X 175229 spots------
-----PRECAST model setting: error_heter=TRUE, Sigma_equal=FALSE, Sigma_diag=TRUE, mix_prop_heter=TRUE
Start computing intial values... 

fitting ...
  |                                                                              |                                                                      |   0%  |                                                                              |===================================                                   |  50%  |                                                                              |======================================================================| 100%
2024-04-18 09:00:22.837011 : ***** Initialization finished!, 36.596 mins elapsed.
----Fitting PRECAST model----------------

variable initialize finish! 
predict Y and V! 
Finish ICM step! 
iter = 2, loglik= -117110704.000000, dloglik=0.945466 
predict Y and V! 
diff Energy = 38.348915 
diff Energy = 1.222202 
diff Energy = 1.565543 
diff Energy = 0.466717 
diff Energy = 24.082525 
diff Energy = 37.318903 
Finish ICM step! 
iter = 3, loglik= -116259184.000000, dloglik=0.007271 
predict Y and V! 
diff Energy = 130.176067 
diff Energy = 96.487793 
diff Energy = 126.036619 
diff Energy = 96.540810 
diff Energy = 87.112157 
diff Energy = 122.648158 
diff Energy = 96.070160 
diff Energy = 155.992503 
diff Energy = 137.671200 
diff Energy = 31.269773 
Finish ICM step! 
iter = 4, loglik= -115950848.000000, dloglik=0.002652 
predict Y and V! 
diff Energy = 64.670876 
diff Energy = 38.664344 
diff Energy = 178.029685 
diff Energy = 47.305956 
diff Energy = 96.912532 
diff Energy = 17.065495 
diff Energy = 146.441281 
diff Energy = 184.862895 
diff Energy = 159.773637 
diff Energy = 25.123545 
Finish ICM step! 
iter = 5, loglik= -115795920.000000, dloglik=0.001336 
predict Y and V! 
diff Energy = 40.344705 
diff Energy = 35.251795 
diff Energy = 137.145315 
diff Energy = 66.886370 
diff Energy = 143.664075 
diff Energy = 69.520543 
diff Energy = 95.499218 
diff Energy = 123.450111 
diff Energy = 110.293113 
diff Energy = 6.357351 
Finish ICM step! 
iter = 6, loglik= -115702520.000000, dloglik=0.000807 
predict Y and V! 
diff Energy = 71.774961 
diff Energy = 17.909213 
diff Energy = 80.226556 
diff Energy = 79.019079 
diff Energy = 104.140105 
diff Energy = 60.203165 
diff Energy = 68.962325 
diff Energy = 74.738702 
diff Energy = 26.838445 
diff Energy = 47.580502 
Finish ICM step! 
iter = 7, loglik= -115640192.000000, dloglik=0.000539 
predict Y and V! 
diff Energy = 30.256103 
diff Energy = 11.371914 
diff Energy = 50.318377 
diff Energy = 70.289075 
diff Energy = 101.527454 
diff Energy = 36.846053 
diff Energy = 46.110914 
diff Energy = 82.343089 
diff Energy = 56.454927 
Finish ICM step! 
iter = 8, loglik= -115595736.000000, dloglik=0.000384 
predict Y and V! 
diff Energy = 66.665404 
diff Energy = 23.632251 
diff Energy = 27.154086 
diff Energy = 31.062636 
diff Energy = 129.302749 
diff Energy = 31.351183 
diff Energy = 0.777787 
diff Energy = 139.916211 
diff Energy = 78.781717 
diff Energy = 4.516905 
Finish ICM step! 
iter = 9, loglik= -115562144.000000, dloglik=0.000291 
predict Y and V! 
diff Energy = 12.322769 
diff Energy = 16.337528 
diff Energy = 98.386211 
diff Energy = 30.032753 
diff Energy = 71.264571 
diff Energy = 38.097891 
diff Energy = 10.401479 
diff Energy = 28.970461 
diff Energy = 46.874479 
Finish ICM step! 
iter = 10, loglik= -115535848.000000, dloglik=0.000228 
predict Y and V! 
diff Energy = 1.201260 
diff Energy = 3.906937 
diff Energy = 38.974645 
diff Energy = 41.849207 
diff Energy = 58.290531 
diff Energy = 10.249998 
diff Energy = 13.244944 
diff Energy = 23.092447 
diff Energy = 21.868984 
diff Energy = 16.826377 
Finish ICM step! 
iter = 11, loglik= -115514504.000000, dloglik=0.000185 
predict Y and V! 
diff Energy = 10.425058 
diff Energy = 1.253790 
diff Energy = 27.626255 
diff Energy = 47.953168 
diff Energy = 64.070452 
diff Energy = 20.159811 
diff Energy = 45.893949 
diff Energy = 36.891088 
diff Energy = 24.777093 
diff Energy = 13.239688 
Finish ICM step! 
iter = 12, loglik= -115496608.000000, dloglik=0.000155 
predict Y and V! 
diff Energy = 11.322726 
diff Energy = 4.734942 
diff Energy = 43.655932 
diff Energy = 21.252590 
diff Energy = 44.297234 
diff Energy = 31.481778 
diff Energy = 2.665230 
diff Energy = 47.788083 
diff Energy = 39.931807 
diff Energy = 4.275099 
Finish ICM step! 
iter = 13, loglik= -115481216.000000, dloglik=0.000133 
predict Y and V! 
diff Energy = 4.315719 
diff Energy = 6.187696 
diff Energy = 31.516219 
diff Energy = 37.711772 
diff Energy = 39.520655 
diff Energy = 79.525058 
diff Energy = 15.029806 
diff Energy = 37.558244 
diff Energy = 53.990927 
diff Energy = 13.973186 
Finish ICM step! 
iter = 14, loglik= -115467736.000000, dloglik=0.000117 
predict Y and V! 
diff Energy = 12.753284 
diff Energy = 23.754552 
diff Energy = 32.722673 
diff Energy = 51.728067 
diff Energy = 12.417464 
diff Energy = 1.281204 
diff Energy = 54.891326 
diff Energy = 41.159483 
diff Energy = 11.313292 
Finish ICM step! 
iter = 15, loglik= -115455192.000000, dloglik=0.000109 
predict Y and V! 
diff Energy = 7.620905 
diff Energy = 23.875459 
diff Energy = 43.244192 
diff Energy = 43.141016 
diff Energy = 37.221101 
diff Energy = 27.196763 
diff Energy = 6.178018 
diff Energy = 6.254077 
diff Energy = 85.482105 
diff Energy = 5.341887 
Finish ICM step! 
iter = 16, loglik= -115443312.000000, dloglik=0.000103 
predict Y and V! 
diff Energy = 9.716959 
diff Energy = 5.131774 
diff Energy = 23.258638 
diff Energy = 18.545609 
diff Energy = 57.579436 
diff Energy = 35.257986 
diff Energy = 2.822712 
diff Energy = 30.994440 
diff Energy = 13.260307 
diff Energy = 41.717478 
Finish ICM step! 
iter = 17, loglik= -115431128.000000, dloglik=0.000106 
predict Y and V! 
diff Energy = 8.667245 
diff Energy = 15.582630 
diff Energy = 5.082349 
diff Energy = 20.473374 
diff Energy = 16.460066 
diff Energy = 10.906347 
diff Energy = 44.998961 
diff Energy = 12.500138 
diff Energy = 7.987050 
Finish ICM step! 
iter = 18, loglik= -115418344.000000, dloglik=0.000111 
predict Y and V! 
diff Energy = 17.372818 
diff Energy = 0.501060 
diff Energy = 22.994239 
diff Energy = 33.278312 
diff Energy = 14.872536 
diff Energy = 20.929514 
diff Energy = 8.233574 
diff Energy = 29.556407 
diff Energy = 9.358550 
diff Energy = 6.745280 
Finish ICM step! 
iter = 19, loglik= -115405200.000000, dloglik=0.000114 
predict Y and V! 
diff Energy = 12.763863 
diff Energy = 18.214232 
diff Energy = 124.928403 
diff Energy = 24.995669 
diff Energy = 19.169288 
diff Energy = 7.444399 
diff Energy = 33.732284 
diff Energy = 11.780128 
Finish ICM step! 
iter = 20, loglik= -115391176.000000, dloglik=0.000122 
predict Y and V! 
diff Energy = 66.875004 
diff Energy = 2.300764 
diff Energy = 5.770537 
diff Energy = 12.845132 
diff Energy = 22.895497 
diff Energy = 19.975632 
diff Energy = 3.416264 
diff Energy = 31.839856 
diff Energy = 9.845762 
diff Energy = 3.506071 
Finish ICM step! 
iter = 21, loglik= -115375920.000000, dloglik=0.000132 
predict Y and V! 
diff Energy = 0.711929 
diff Energy = 4.519751 
diff Energy = 10.028270 
diff Energy = 54.225263 
diff Energy = 29.765494 
diff Energy = 17.074025 
diff Energy = 0.795011 
diff Energy = 115.752308 
diff Energy = 14.751283 
diff Energy = 13.489935 
Finish ICM step! 
iter = 22, loglik= -115359104.000000, dloglik=0.000146 
predict Y and V! 
diff Energy = 20.945287 
diff Energy = 4.796930 
diff Energy = 7.877452 
diff Energy = 12.526606 
diff Energy = 9.686685 
diff Energy = 23.203943 
diff Energy = 5.096711 
diff Energy = 16.571502 
diff Energy = 3.553704 
diff Energy = 4.876914 
Finish ICM step! 
iter = 23, loglik= -115341048.000000, dloglik=0.000157 
predict Y and V! 
diff Energy = 7.256549 
diff Energy = 2.480585 
diff Energy = 23.114243 
diff Energy = 22.130618 
diff Energy = 16.223301 
diff Energy = 14.845859 
diff Energy = 11.086856 
diff Energy = 34.759898 
diff Energy = 5.631755 
diff Energy = 0.068312 
Finish ICM step! 
iter = 24, loglik= -115322432.000000, dloglik=0.000161 
predict Y and V! 
diff Energy = 5.174106 
diff Energy = 3.090021 
diff Energy = 25.314050 
diff Energy = 25.471855 
diff Energy = 27.271217 
diff Energy = 17.891382 
diff Energy = 9.415342 
diff Energy = 5.918799 
diff Energy = 6.490610 
diff Energy = 0.482270 
Finish ICM step! 
iter = 25, loglik= -115303784.000000, dloglik=0.000162 
predict Y and V! 
diff Energy = 0.918955 
diff Energy = 0.922021 
diff Energy = 84.135697 
diff Energy = 28.459487 
diff Energy = 6.753603 
diff Energy = 19.629611 
diff Energy = 12.696332 
diff Energy = 7.787512 
diff Energy = 2.646096 
diff Energy = 0.588259 
Finish ICM step! 
iter = 26, loglik= -115285600.000000, dloglik=0.000158 
predict Y and V! 
diff Energy = 4.642156 
diff Energy = 8.726521 
diff Energy = 9.552924 
diff Energy = 5.671002 
diff Energy = 10.354569 
diff Energy = 56.580586 
diff Energy = 10.766498 
diff Energy = 7.270720 
diff Energy = 1.780026 
Finish ICM step! 
iter = 27, loglik= -115268592.000000, dloglik=0.000148 
predict Y and V! 
diff Energy = 9.973978 
diff Energy = 8.267431 
diff Energy = 0.708419 
diff Energy = 6.755562 
diff Energy = 16.643792 
diff Energy = 21.395893 
diff Energy = 4.823375 
diff Energy = 18.115701 
diff Energy = 5.820414 
diff Energy = 4.196440 
Finish ICM step! 
iter = 28, loglik= -115252904.000000, dloglik=0.000136 
predict Y and V! 
diff Energy = 4.240268 
diff Energy = 2.147090 
diff Energy = 25.348270 
diff Energy = 9.682984 
diff Energy = 62.575966 
diff Energy = 9.645292 
diff Energy = 0.651379 
diff Energy = 18.224723 
diff Energy = 3.750159 
diff Energy = 0.693475 
Finish ICM step! 
iter = 29, loglik= -115238688.000000, dloglik=0.000123 
predict Y and V! 
diff Energy = 16.659518 
diff Energy = 4.679270 
diff Energy = 12.045061 
diff Energy = 7.444565 
diff Energy = 5.940454 
diff Energy = 13.104758 
diff Energy = 5.857681 
diff Energy = 16.423432 
diff Energy = 11.047385 
diff Energy = 3.266925 
Finish ICM step! 
iter = 30, loglik= -115225640.000000, dloglik=0.000113 
2024-04-18 13:17:17.190105 : ***** PRECAST model fitting finished!, 256.906 mins elapsed.
The total number of spots exceeds 8e4, thus the subsampling schema will be used to speed up computation.
IntegrateSRTData: the subsampling schema will be used to speed up computation since subsample_rate is smaller than 1.
Using bouth housekeeping gene and PRECAST results to obtain the batch corrected gene expressions.
Start integration...
2024-04-18 13:18:59.660609 : ***** Data integration finished!, 1.605 mins elapsed.
Put the data into a new Seurat object...
2024-04-18 13:19:18.343643 : ***** New Seurat object is generated!, 0.311 mins elapsed.
